{"version":3,"sources":["compontents/Title.js","compontents/Form.js","compontents/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Title","react_default","a","createElement","className","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","API_KEY","App","state","undefined","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","_this","setState","main","temp","sys","weather","stop","this","compontents_Title","compontents_Form","compontents_Weather","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e8f92db1.chunk.js","sourcesContent":["import React from 'react';\n\nconst Title = () => (\n    <div>\n        <h1 className=\"title-container__title\">Weather Finders</h1>\n        <p className=\"title-container__subtitle\">Find out temperature, conditions and more...</p>\n    </div>\n);\n\nexport default Title;","import React from 'react';\n\nconst Form = props => (\n    <form onSubmit={props.getWeather}>\n         <input type=\"text\" name='city' placeholder=\"City...\"/>\n         <input type=\"text\" name='country' placeholder=\"Country..\"/>\n         <button>Get Weather</button>\n    </form>\n)\n\nexport default Form;","import React from 'react';\n\n// class Weather extends React.Component{\n//     render(){\n//         return(\n//             <div>\n//                 {this.props.city && this.props.country && <p>Location: {this.props.city}, {this.props.country}</p> }       \n//                 {this.props.temperature && <p>Temperature: {this.props.temperature}</p>}\n//                 {this.props.humidity && <p>Humidity: {this.props.humidity} </p> }\n//                 {this.props.description && <p>Conditions: {this.props.description} </p> } {this.props.error && <p>{this.props.error}</p>}\n//             </div>\n//         )\n//     }\n// };\n\n//converted to stateless function \n\nconst Weather = props => (\n    <div className =\"weather_info\">\n        { \n            props.city && props.country && <p className=\"weather__key\">Location: \n                 <span className=\"weather__value\"> {props.city}, {props.country}</span>\n                 </p> \n        }   \n        { \n            props.temperature && <p className=\"weather__key\">Temperature:  \n                <span className=\"weather__value\"> {props.temperature}</span>\n            </p>\n        }\n        { \n            props.humidity && <p className=\"weather__key\">Humidity:  \n            <span className=\"weather__value\"> {props.humidity}</span> \n            </p> \n        }\n        { \n            props.description && <p className=\"weather__key\"> Conditions:  \n            <span className=\"weather__value\"> {props.description} </span>\n            </p> \n        } \n        { \n            props.error && <p className=\"weather__error\">{props.error}</p>\n        }\n    </div>\n) \n    \nexport default Weather;","import React from 'react';\n\nimport Title from  './compontents/Title';\nimport Form from './compontents/Form';\nimport Weather from './compontents/Weather';\n\nconst API_KEY =\"a0ec243ccb6b309add0147128106b914\";\n\nclass App extends React.Component{\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n  }\n  getWeather =  async(e) => {\n    e.preventDefault(); //prevent full refresh\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    const api_call =  await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&APPID=${API_KEY}`);\n\n    //convert response to JSON format\n    const data = await api_call.json();\n    if(city && country) {\n      // console.log(data);\n    this.setState({\n      temperature:data.main.temp,\n      city: data.name,\n      country: data.sys.country,\n      humidity: data.main.humidity,\n      description: data.weather[0].description,\n      error:\"\"\n    });\n    } else {\n      this.setState({\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: \"Please enter the values.\"\n      });\n    }\n  }\n  render(){\n    return(\n      <div>\n        <div className=\"wrapper\">\n          <div className=\"main\">\n            <div className=\"container\">\n              <div className=\"row\">\n                <div className=\"col-xs-5 title-container\">\n                  <Title />\n                </div>\n                <div className=\"col-xs-7 form-container\">\n                  <Form getWeather={this.getWeather}/>\n                  <Weather \n                    temperature={this.state.temperature}\n                    city={this.state.city}\n                    country= {this.state.country}\n                    humidity={this.state.humidity}\n                    description={this.state.description}\n                    error= {this.state.error}/>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n      </div>\n    );\n  }\n};\n        \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}